{{!# Main}}
/// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;

#line hidden

{{#if Namespace~}}
namespace {{Namespace}}
{
{{~/if~}}
	{{> ClientInterface}}

	{{> ClientClass}}

{{#if Namespace~}}
}
{{~/if~}}

{{!# HttpClientName}} HttpClient
{{!# ClientExceptionBaseClass}} Exception
{{!# interfaceBase }} 
{{!# jsonConverters }} 
{{!# BeforeInterfaceOperation}}
{{!# StringifyEnums}} true

{{!# ClientException}}
	public sealed class {{ClassName}}Exception : {{> ClientExceptionBaseClass}}
	{	
		{{ifTemplate 'ClientExceptionBaseClass' 'Exception'}}
		public HttpResponseMessage Response { get; private set; }
        public IEnumerable<string> ErrorMessages { get; private set; }

        public {{ClassName}}Exception(HttpResponseMessage response)
            : base("Error running graphql query, see response for more details")
        {
            this.Response = response;
        }

        public {{ClassName}}Exception(IEnumerable<string> errorMessages, HttpResponseMessage response)
            : base("Error running graphql query, see error messages or response for more details")
        {
            this.Response = response;
            this.ErrorMessages = errorMessages;
        }
		{{else}}
		public {{ClassName}}Exception(HttpResponseMessage response)
            : base(response)
        {
        }

        public {{ClassName}}Exception(IEnumerable<string> errorMessages, HttpResponseMessage response)
            : base(errorMessages, response)
        {
        }
		{{/ifTemplate}}
	}
	
{{!# ClientInterfaceBase}} {{ifTemplate 'InterfaceBase'}}: {{ > InterfaceBase}} {{/ifTemplate}}

{{!# ClientInterface}}

	public interface I{{ClassName}}{{>ClientInterfaceBase}}
	{
		{{#each Operations}}
			{{> InterfaceOperation}}
		{{/each}}
	}
	
{{!# ClientClass}}
	public sealed class {{ClassName}} : I{{ClassName}}
	{
		private static JsonSerializerSettings jsonSettings = new JsonSerializerSettings()
		{
			Converters =
			{
				new Newtonsoft.Json.Converters.StringEnumConverter(camelCaseText: false),
				{{ > jsonConverters }}
			}
		};

		private string SerializeBody(GraphQLRequest request)
		{
			return JsonConvert.SerializeObject(request, jsonSettings);
		}

		private async Task<GraphQLResponseData<T>> DeserializeBodyAsync<T>(HttpResponseMessage response)
		{
            var jsonResult = await response.Content.ReadAsStringAsync();
            var errorsResult = JsonConvert.DeserializeObject<GraphQLResponseErrors<T>>(jsonResult, jsonSettings);

			if (errorsResult.errors?.Any() == true) {
				throw new {{ClassName}}Exception(errorsResult.errors.Select(x => x.Message), response);
			}

			var result = JsonConvert.DeserializeObject<GraphQLResponseData<T>>(jsonResult, jsonSettings);
			return result;
		}

		private readonly {{>HttpClientName}} client;
		
		public {{pascalCase ClassName}}({{>HttpClientName}} client)
		{
			this.client = client;
		}
		
		internal sealed class GraphQLRequest
		{
			public string query { get; set; }

			public Dictionary<string, object> variables { get; set; }
		}

		internal sealed class GraphQLResponseErrors<T>
		{
			public IEnumerable<GraphQLResponseError> errors { get; set; }
		}
		
		internal sealed class GraphQLResponseData<T>
		{
			public T data { get; set; }
		}

		internal sealed class GraphQLResponseError
		{
			public string Message { get; set; }
		}

        {{> ClientException}}

		{{#each Operations}}
			{{> Operation}}
		{{/each}}
	
		{{#each Types}}
			{{> TypeOrInterface}}
		{{/each}}

		{{#each Enums}}
			{{> Enum}}
		{{/each}}
	}
	
{{!# TypeOrInterface}}
	{{#if IsInterface}}{{> Interface}}{{else}}{{> Type}}{{/if}}
	
{{!# Type}}
	public sealed class {{pascalCase Name}} {{#each~ Interfaces}}{{~#if @first}}: {{else}}, {{/if~}}I{{pascalCase .}}{{~/each}}
	{
		{{#each Fields}}
		[JsonProperty("{{Name}}")]
		public {{> TypeReference Type}} {{pascalCase Name}} { get; set; }
		{{/each}}
	}


{{!# Interface}}
	public interface I{{pascalCase Name}}
	{
		{{#each Fields}}
		{{> TypeReference Type}} {{pascalCase Name}} { get; set; }
		{{/each}}
	}
	
{{!# Enum}}

	{{ifTemplate 'StringifyEnums' 'true'}}
		[JsonConverter(typeof({{pascalCase Name}}.CustomJsonStringifiedEnumConverter))]
		public class {{pascalCase Name}}
		{
			static Dictionary<string, {{pascalCase Name}}> lookup = new Dictionary<string, {{pascalCase Name}}>();

			public string Value { get; }
			public bool IsDefined { get; }

			private {{pascalCase Name}}(string value, bool isDefined)
			{
				this.Value = value;
				this.IsDefined = isDefined;
			}

			private static {{pascalCase Name}} Create(string value, bool isDefined)
			{
				if (lookup.TryGetValue(value, out var val))
				{
					return val;
				}

				lock (lookup)
				{
					if (lookup.TryGetValue(value, out val))
					{
						return val;
					}

					val = new {{pascalCase Name}}(value, isDefined);
					lookup.Add(value, val);

					return val;
				}
			}

			public static implicit operator {{pascalCase Name}}(string value) => Create(value, false);
			public static implicit operator string({{pascalCase Name}} value) => value.Value;
			
			{{#each Values}}
			public static readonly {{pascalCase ../Name}} {{pascalCase .}} = Create("{{.}}", true);
			{{/each}}

			internal class CustomJsonStringifiedEnumConverter : JsonConverter
			{
				public override bool CanConvert(Type objectType)
				{
					return typeof({{pascalCase Name}}).IsAssignableFrom(objectType);
				}

				public override bool CanRead => false;

				public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
				{
					throw new NotImplementedException();
				}

				public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
				{
					if (value is {{pascalCase Name}} v)
					{
						writer.WriteValue(v.Value);
					}
					else
					{
						writer.WriteNull();
					}
				}
			}
		}
	{{else}}
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	public enum {{pascalCase Name}}
	{
		{{#each Values}}
		{{.}},
		{{/each}}
	}
	{{/ifTemplate}}

{{!# InterfaceOperation}}
        {{ > BeforeInterfaceOperation}}
		Task<{{> TypeReference ResultType}}> {{pascalCase Name}}Async({{> ArgumentList Arguments}});

{{!# Operation}}

		public Task<{{> TypeReference ResultType}}> {{pascalCase Name}}Async({{> ArgumentList Arguments}})
		{
            return _{{Name}}Async(new Dictionary<string, object> 
			{
				{{#each Arguments}}
				{ @"{{replace Name '"' '""'}}", {{camelCase Name}} },
				{{/each}}
			});
		}

        private async Task<{{> TypeReference ResultType}}> _{{Name}}Async(Dictionary<string, object> variables)
		{
			const string query = @"{{replace Query '"' '""'}}";
        	var stringContent = SerializeBody(new GraphQLRequest()
			{
				query = query,
				variables = variables,
			});
			var request = new HttpRequestMessage();

			var content = new StringContent(stringContent);
			content.Headers.ContentType.MediaType = "application/json";
			request.Content = content;
			request.Method = new HttpMethod("POST");
			request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

			System.Threading.CancellationToken cancellationToken;
			var response = await client
				.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken)
				.ConfigureAwait(false);

			if (!response.IsSuccessStatusCode)
			{
				throw new {{../ClassName}}Exception(response);
			}

			var result = await DeserializeBodyAsync<{{> TypeReference ResultType}}>(response);

			if (result == null)
			{
				throw new {{../ClassName}}Exception(response);
			}

			return result.data;
        }
		
{{!# ArgumentList}}
		{{~#each~ .}}
			{{~#unless @first}}, {{/unless~}}{{> TypeReference Type}} {{camelCase Name}}
		{{~/each~}}
	
{{!# TypeReference}}
	{{~#if IsScaler}}
	{{~ifTemplate (concat 'TypeReference_' TypeName)~}}
		{{ > (concat 'TypeReference_' TypeName) }}
	{{~else~}}
		{{ > (concat 'TypeReference_String') }}
	{{~/ifTemplate~}} 
	{{~else~}}
	{{~#if IsEnum~}}
	{{> RenderTypeReference name=TypeName  prefix=true fixCase=true isValueType=true isCollection=IsCollection nullable=CanValueBeNull }}
	{{~else~}}
	{{> RenderTypeReference name=TypeName  prefix=true fixCase=true isValueType=false isCollection=IsCollection nullable=CanValueBeNull }}
	{{~/if~}}
	{{~/if~}}

{{!# TypeReference_Int}}
	{{~> RenderTypeReference name='int' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}
	
{{!# TypeReference_String}}
	{{~> RenderTypeReference name='string' isValueType=false fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}

{{!# TypeReference_ID}}
	{{~> RenderTypeReference name='string' isValueType=false fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}

{{!# TypeReference_Float}}
	{{~> RenderTypeReference name='decimal' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}

{{!# TypeReference_Boolean}}
	{{~> RenderTypeReference name='bool' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}
	
{{!# TypeReference_DateTime}}
	{{~> RenderTypeReference name='DateTime' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}

{{!# TypeReference_Date}}
	{{~> RenderTypeReference name='DateTime' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}
	
{{!# TypeReference_GUID}}
	{{~> RenderTypeReference name='Guid' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}

{{!# TypeReference_Uuid}}
	{{~> RenderTypeReference name='Guid' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}
	
{{!# RenderTypeReference}}
	{{~#if isCollection }}IEnumerable<{{/if~}}
	{{~#if prefix }}{{@root.ClassName}}.{{/if~}}
	{{#if fixCase}}{{pascalCase name}}{{/if}}{{#unless fixCase}}{{name}}{{/unless}}
	{{~#if isValueType}}{{#if nullable}}?{{/if}}{{/if~}}
	{{~#if isCollection}}>{{/if}}
