{{!# Includes }}

{{!# ClientClassDecorators }}

{{!# FetchCient }}
fetch

{{!# ApiUrl }}
{{error 'TemplateSettings.ApiUrl or TemplateSettings.UrlConfig muse be specified for loading the api base url' }}

{{!# UrlConfig }}
const url = "{{>ApiUrl}}";

{{!# Main}}

// @ts-nocheck
// @ts-ignore
/* tslint:disable */
/* eslint:disable */
//----------------------
// <auto-generated>
//     Generated using the Tocsoft.GraphQLCodeGen toolchain https://github.com/tocsoft/GraphQLCodeGen
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

{{> Includes }}

const client = { 
	fetch : {{> FetchCient }},
};
{{>UrlConfig}}

class GraphQLResponse
{
    data: any
    errors: Array<{ message: string }> = []
}

export class QueryError extends Error {
  public httpResponse: Response;
  public errors: string[]

  constructor(message: string, httpResponse: Response, graphqlResponse?: GraphQLResponse) {
    message = message || 'Error fetching graphql response'
    super(message);

    this.httpResponse = httpResponse;
    if (graphqlResponse && graphqlResponse.errors) {
      this.errors = graphqlResponse.errors.map(x => x.message);
    } else {
      this.errors = [];
    }
  }
}
	
{{#each Types}}
	{{> Type}}
	

{{/each}}

{{#each Operations}}
  {{> Operation}}

{{/each}}

{{#each Enums}}
	{{> Enum}}


{{/each}}

{{!# Type}}
export class {{pascalCase Name}} {
	{{#each Fields}}
	{{> NameTypeReference .}};
	{{/each}}

    static fromJS(json:any):{{pascalCase Name}}{
        if(json == null || json == undefined){
            return null;
        }
        
        var result = new {{pascalCase Name}}();

		{{#each Fields}}
		{{> FieldSetter .}}

		{{/each}}

        return result;
    }
}

{{!# Enum}}
	export enum {{pascalCase Name}}
	{
		{{#each Values}}
		{{.}} = "{{.}}",
		{{/each}}
	}

{{!# Operation}}
		export function {{camelCase OperationName}}({{> ArgumentList Arguments}}) : Promise<{{> TypeReference ResultType}}>{
        return client.fetch(url, {
            method : 'POST',
            body : JSON.stringify({
                query : `{{replace Query '`' '\`'}}`,
                variables : {
				 {{#each Arguments}}
					{{Name}} : {{camelCase Name }} ,
				 {{/each}}                 
                }
            })
        }).then(response=>{
            if(response.status != 200){
                // error result
                throw new {{pascalCase ../ClassName}}Error("http error running '{{camelCase Name}}', see httpResponse for more details.", response)
            }else{
                return response.json().then((json:GraphQLResponse)=>{
                    
                    if(json.errors && json.errors.length > 0){
                        throw new {{pascalCase ../ClassName}}Error("graphql error(s) running '{{camelCase Name}}', see errors collection fro more details", response, json)
                    }
                    
                    return {{> TypeReference ResultType}}.fromJS(json.data);
                })
            }
        })
    }
		
{{!# ArgumentList}}
	{{~#each~ .}}
		{{~#unless @first}}, {{/unless~}}{{> NameTypeReference .}} 
	{{~/each~}}
	
{{!# NameTypeReference}}
	{{camelCase Name}}{{~#if Type.IsCollection}}{{~#if Type.CanCollectionBeNull}}?{{/if~}}{{/if~}}{{~#unless Type.IsCollection}}{{#if Type.CanValueBeNull }}?{{/if}}{{/unless}} : 
	{{~> TypeReference Type ~}}

		
{{!# TypeReference}}
	{{~#if IsScaler}}{{ > (concat 'TypeReference_' TypeName) }}{{/if~}}
	{{~#unless IsScaler}}{{> RenderTypeReference typename=TypeName fixCase=true isValueType=false isCollection=IsCollection nullable=CanValueBeNull collectionNullable=CanCollectionBeNull  }}{{/unless}}

{{!# TypeReference_Int}}
	{{~> RenderTypeReference typename='number' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull collectionNullable=CanCollectionBeNull }}
	
{{!# TypeReference_String}}
	{{~> RenderTypeReference  typename='string' isValueType=false fixCase=false isCollection=IsCollection nullable=CanValueBeNull collectionNullable=CanCollectionBeNull  }}

{{!# TypeReference_ID}}
	{{~> RenderTypeReference  typename='string' isValueType=false fixCase=false isCollection=IsCollection nullable=CanValueBeNull collectionNullable=CanCollectionBeNull }}

{{!# TypeReference_GUID}}
	{{~> RenderTypeReference  typename='string' isValueType=false fixCase=false isCollection=IsCollection nullable=CanValueBeNull collectionNullable=CanCollectionBeNull }}

{{!# TypeReference_Uuid}}
	{{~> RenderTypeReference  typename='string' isValueType=false fixCase=false isCollection=IsCollection nullable=CanValueBeNull collectionNullable=CanCollectionBeNull }}

{{!# TypeReference_Float}}
	{{~> RenderTypeReference typename='number' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull collectionNullable=CanCollectionBeNull  }}

{{!# TypeReference_Boolean}}
	{{~> RenderTypeReference typename='boolean' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull collectionNullable=CanCollectionBeNull  }}
	
{{!# TypeReference_DateTime}}
	{{~> RenderTypeReference typename='Date' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull collectionNullable=CanCollectionBeNull  }}

{{!# TypeReference_Date}}
	{{~> RenderTypeReference typename='Date' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull collectionNullable=CanCollectionBeNull  }}
	
{{!# RenderTypeReference}}
	{{~#if isCollection }}Array<{{/if~}}
	{{#if fixCase}}{{pascalCase typename}}{{/if}}{{#unless fixCase}}{{typename}}{{/unless}}
	{{~#if isCollection}}>{{/if}}

	
{{!# FieldSetter}}
	{{~#if Type.IsScaler}}{{ > (concat 'FieldSetter_' Type.TypeName) }}{{/if~}}
	{{~#unless Type.IsScaler}}{{> RenderFieldSetter name=Name typename=Type.TypeName isCollection=Type.IsCollection isEnum=Type.IsEnum }}{{/unless}}

{{!# FieldSetter_Int}}
	result.{{camelCase Name}} = json["{{camelCase Name}}"];
	
{{!# FieldSetter_String}}
	result.{{camelCase Name}} = json["{{camelCase Name}}"];

{{!# FieldSetter_ID}}
	result.{{camelCase Name}} = json["{{camelCase Name}}"];

{{!# FieldSetter_GUID}}
	result.{{camelCase Name}} = json["{{camelCase Name}}"];

{{!# FieldSetter_Uuid}}
	result.{{camelCase Name}} = json["{{camelCase Name}}"];

{{!# FieldSetter_Float}}
	result.{{camelCase Name}} = json["{{camelCase Name}}"];

{{!# FieldSetter_Boolean}}
	result.{{camelCase Name}} = json["{{camelCase Name}}"];
	
{{!# FieldSetter_DateTime}}
	{{~#if Type.IsCollection~}}
	if(json["{{camelCase Name}}"]){ result.{{camelCase Name}} = json["{{camelCase Name}}"].map(v=> v ? new Date(v) : null);	}{{/if~}}
	{{~#unless Type.IsCollection~}}result.{{camelCase Name}} = json["{{camelCase Name}}"] ? new Date(json["{{camelCase Name}}"]) : null;{{~/unless~}}
	
{{!# FieldSetter_Date}}
	{{~#if Type.IsCollection~}}
	if(json["{{camelCase Name}}"]){ result.{{camelCase Name}} = json["{{camelCase Name}}"].map(v=> v ? new Date(v) : null);	}{{/if~}}
	{{~#unless Type.IsCollection~}}result.{{camelCase Name}} = json["{{camelCase Name}}"] ? new Date(json["{{camelCase Name}}"]) : null;{{~/unless~}}

{{!# RenderFieldSetter}}
	{{~#if isCollection~}}
	if(json["{{camelCase name}}"]){ 
		result.{{camelCase name}} = json["{{camelCase name}}"].map(v=> 
			{{~#if isEnum}}{{pascalCase typename}}[<string>v]{{/if~}}
			{{~#unless isEnum}}{{pascalCase typename}}.fromJS(v) {{/unless~}}
		);	
	}{{/if~}}
	{{~#unless isCollection~}}
	{{~#if isEnum}}result.{{camelCase name}}= {{pascalCase typename}}[<string>json["{{camelCase name}}"]];{{/if~}}
	{{~#unless isEnum}}result.{{camelCase name}}= {{pascalCase typename}}.fromJS(json["{{camelCase name}}"]);{{/unless~}}
	{{~/unless~}}
